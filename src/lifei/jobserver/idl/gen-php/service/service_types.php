<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Job {
  static $_TSPEC;

  public $id = null;
  public $user = null;
  public $command = null;
  public $name = null;
  public $desc = null;
  public $createtime = null;
  public $executetime = null;
  public $finishtime = null;
  public $exitvalue = null;
  public $stdout = null;
  public $stderr = null;
  public $workdir = null;
  public $status = null;
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'command',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'createtime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'executetime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'finishtime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'exitvalue',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'stdout',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'stderr',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'workdir',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
      if (isset($vals['command'])) {
        $this->command = $vals['command'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['createtime'])) {
        $this->createtime = $vals['createtime'];
      }
      if (isset($vals['executetime'])) {
        $this->executetime = $vals['executetime'];
      }
      if (isset($vals['finishtime'])) {
        $this->finishtime = $vals['finishtime'];
      }
      if (isset($vals['exitvalue'])) {
        $this->exitvalue = $vals['exitvalue'];
      }
      if (isset($vals['stdout'])) {
        $this->stdout = $vals['stdout'];
      }
      if (isset($vals['stderr'])) {
        $this->stderr = $vals['stderr'];
      }
      if (isset($vals['workdir'])) {
        $this->workdir = $vals['workdir'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'Job';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->command);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->executetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->finishtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->exitvalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stdout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stderr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->workdir);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Job');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user !== null) {
      $xfer += $output->writeFieldBegin('user', TType::STRING, 2);
      $xfer += $output->writeString($this->user);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->command !== null) {
      $xfer += $output->writeFieldBegin('command', TType::STRING, 3);
      $xfer += $output->writeString($this->command);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createtime !== null) {
      $xfer += $output->writeFieldBegin('createtime', TType::I64, 6);
      $xfer += $output->writeI64($this->createtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->executetime !== null) {
      $xfer += $output->writeFieldBegin('executetime', TType::I64, 7);
      $xfer += $output->writeI64($this->executetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->finishtime !== null) {
      $xfer += $output->writeFieldBegin('finishtime', TType::I64, 8);
      $xfer += $output->writeI64($this->finishtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exitvalue !== null) {
      $xfer += $output->writeFieldBegin('exitvalue', TType::I64, 9);
      $xfer += $output->writeI64($this->exitvalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stdout !== null) {
      $xfer += $output->writeFieldBegin('stdout', TType::STRING, 10);
      $xfer += $output->writeString($this->stdout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stderr !== null) {
      $xfer += $output->writeFieldBegin('stderr', TType::STRING, 11);
      $xfer += $output->writeString($this->stderr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->workdir !== null) {
      $xfer += $output->writeFieldBegin('workdir', TType::STRING, 12);
      $xfer += $output->writeString($this->workdir);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 13);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 14);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
