/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package lifei.jobserver.thrift.models;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Job implements TBase<Job, Job._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Job");

  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)1);
  private static final TField USER_FIELD_DESC = new TField("user", TType.STRING, (short)2);
  private static final TField COMMAND_FIELD_DESC = new TField("command", TType.STRING, (short)3);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)4);
  private static final TField DESC_FIELD_DESC = new TField("desc", TType.STRING, (short)5);
  private static final TField CREATETIME_FIELD_DESC = new TField("createtime", TType.I64, (short)6);
  private static final TField EXECUTETIME_FIELD_DESC = new TField("executetime", TType.I64, (short)7);
  private static final TField FINISHTIME_FIELD_DESC = new TField("finishtime", TType.I64, (short)8);
  private static final TField EXITVALUE_FIELD_DESC = new TField("exitvalue", TType.I64, (short)9);
  private static final TField STDOUT_FIELD_DESC = new TField("stdout", TType.STRING, (short)10);
  private static final TField STDERR_FIELD_DESC = new TField("stderr", TType.STRING, (short)11);
  private static final TField WORKDIR_FIELD_DESC = new TField("workdir", TType.STRING, (short)12);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)13);

  public long id;
  public String user;
  public String command;
  public String name;
  public String desc;
  public long createtime;
  public long executetime;
  public long finishtime;
  public long exitvalue;
  public String stdout;
  public String stderr;
  public String workdir;
  public int status;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ID((short)1, "id"),
    USER((short)2, "user"),
    COMMAND((short)3, "command"),
    NAME((short)4, "name"),
    DESC((short)5, "desc"),
    CREATETIME((short)6, "createtime"),
    EXECUTETIME((short)7, "executetime"),
    FINISHTIME((short)8, "finishtime"),
    EXITVALUE((short)9, "exitvalue"),
    STDOUT((short)10, "stdout"),
    STDERR((short)11, "stderr"),
    WORKDIR((short)12, "workdir"),
    STATUS((short)13, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER
          return USER;
        case 3: // COMMAND
          return COMMAND;
        case 4: // NAME
          return NAME;
        case 5: // DESC
          return DESC;
        case 6: // CREATETIME
          return CREATETIME;
        case 7: // EXECUTETIME
          return EXECUTETIME;
        case 8: // FINISHTIME
          return FINISHTIME;
        case 9: // EXITVALUE
          return EXITVALUE;
        case 10: // STDOUT
          return STDOUT;
        case 11: // STDERR
          return STDERR;
        case 12: // WORKDIR
          return WORKDIR;
        case 13: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __EXECUTETIME_ISSET_ID = 2;
  private static final int __FINISHTIME_ISSET_ID = 3;
  private static final int __EXITVALUE_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.USER, new FieldMetaData("user", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.COMMAND, new FieldMetaData("command", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.DESC, new FieldMetaData("desc", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREATETIME, new FieldMetaData("createtime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.EXECUTETIME, new FieldMetaData("executetime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.FINISHTIME, new FieldMetaData("finishtime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.EXITVALUE, new FieldMetaData("exitvalue", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.STDOUT, new FieldMetaData("stdout", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STDERR, new FieldMetaData("stderr", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WORKDIR, new FieldMetaData("workdir", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.STATUS, new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Job.class, metaDataMap);
  }

  public Job() {
  }

  public Job(
    long id,
    String user,
    String command,
    String name,
    String desc,
    long createtime,
    long executetime,
    long finishtime,
    long exitvalue,
    String stdout,
    String stderr,
    String workdir,
    int status)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.user = user;
    this.command = command;
    this.name = name;
    this.desc = desc;
    this.createtime = createtime;
    setCreatetimeIsSet(true);
    this.executetime = executetime;
    setExecutetimeIsSet(true);
    this.finishtime = finishtime;
    setFinishtimeIsSet(true);
    this.exitvalue = exitvalue;
    setExitvalueIsSet(true);
    this.stdout = stdout;
    this.stderr = stderr;
    this.workdir = workdir;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Job(Job other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetCommand()) {
      this.command = other.command;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.createtime = other.createtime;
    this.executetime = other.executetime;
    this.finishtime = other.finishtime;
    this.exitvalue = other.exitvalue;
    if (other.isSetStdout()) {
      this.stdout = other.stdout;
    }
    if (other.isSetStderr()) {
      this.stderr = other.stderr;
    }
    if (other.isSetWorkdir()) {
      this.workdir = other.workdir;
    }
    this.status = other.status;
  }

  public Job deepCopy() {
    return new Job(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.user = null;
    this.command = null;
    this.name = null;
    this.desc = null;
    setCreatetimeIsSet(false);
    this.createtime = 0;
    setExecutetimeIsSet(false);
    this.executetime = 0;
    setFinishtimeIsSet(false);
    this.finishtime = 0;
    setExitvalueIsSet(false);
    this.exitvalue = 0;
    this.stdout = null;
    this.stderr = null;
    this.workdir = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public long getId() {
    return this.id;
  }

  public Job setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getUser() {
    return this.user;
  }

  public Job setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been asigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getCommand() {
    return this.command;
  }

  public Job setCommand(String command) {
    this.command = command;
    return this;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been asigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Job setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public Job setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been asigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public long getCreatetime() {
    return this.createtime;
  }

  public Job setCreatetime(long createtime) {
    this.createtime = createtime;
    setCreatetimeIsSet(true);
    return this;
  }

  public void unsetCreatetime() {
    __isset_bit_vector.clear(__CREATETIME_ISSET_ID);
  }

  /** Returns true if field createtime is set (has been asigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return __isset_bit_vector.get(__CREATETIME_ISSET_ID);
  }

  public void setCreatetimeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIME_ISSET_ID, value);
  }

  public long getExecutetime() {
    return this.executetime;
  }

  public Job setExecutetime(long executetime) {
    this.executetime = executetime;
    setExecutetimeIsSet(true);
    return this;
  }

  public void unsetExecutetime() {
    __isset_bit_vector.clear(__EXECUTETIME_ISSET_ID);
  }

  /** Returns true if field executetime is set (has been asigned a value) and false otherwise */
  public boolean isSetExecutetime() {
    return __isset_bit_vector.get(__EXECUTETIME_ISSET_ID);
  }

  public void setExecutetimeIsSet(boolean value) {
    __isset_bit_vector.set(__EXECUTETIME_ISSET_ID, value);
  }

  public long getFinishtime() {
    return this.finishtime;
  }

  public Job setFinishtime(long finishtime) {
    this.finishtime = finishtime;
    setFinishtimeIsSet(true);
    return this;
  }

  public void unsetFinishtime() {
    __isset_bit_vector.clear(__FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishtime is set (has been asigned a value) and false otherwise */
  public boolean isSetFinishtime() {
    return __isset_bit_vector.get(__FINISHTIME_ISSET_ID);
  }

  public void setFinishtimeIsSet(boolean value) {
    __isset_bit_vector.set(__FINISHTIME_ISSET_ID, value);
  }

  public long getExitvalue() {
    return this.exitvalue;
  }

  public Job setExitvalue(long exitvalue) {
    this.exitvalue = exitvalue;
    setExitvalueIsSet(true);
    return this;
  }

  public void unsetExitvalue() {
    __isset_bit_vector.clear(__EXITVALUE_ISSET_ID);
  }

  /** Returns true if field exitvalue is set (has been asigned a value) and false otherwise */
  public boolean isSetExitvalue() {
    return __isset_bit_vector.get(__EXITVALUE_ISSET_ID);
  }

  public void setExitvalueIsSet(boolean value) {
    __isset_bit_vector.set(__EXITVALUE_ISSET_ID, value);
  }

  public String getStdout() {
    return this.stdout;
  }

  public Job setStdout(String stdout) {
    this.stdout = stdout;
    return this;
  }

  public void unsetStdout() {
    this.stdout = null;
  }

  /** Returns true if field stdout is set (has been asigned a value) and false otherwise */
  public boolean isSetStdout() {
    return this.stdout != null;
  }

  public void setStdoutIsSet(boolean value) {
    if (!value) {
      this.stdout = null;
    }
  }

  public String getStderr() {
    return this.stderr;
  }

  public Job setStderr(String stderr) {
    this.stderr = stderr;
    return this;
  }

  public void unsetStderr() {
    this.stderr = null;
  }

  /** Returns true if field stderr is set (has been asigned a value) and false otherwise */
  public boolean isSetStderr() {
    return this.stderr != null;
  }

  public void setStderrIsSet(boolean value) {
    if (!value) {
      this.stderr = null;
    }
  }

  public String getWorkdir() {
    return this.workdir;
  }

  public Job setWorkdir(String workdir) {
    this.workdir = workdir;
    return this;
  }

  public void unsetWorkdir() {
    this.workdir = null;
  }

  /** Returns true if field workdir is set (has been asigned a value) and false otherwise */
  public boolean isSetWorkdir() {
    return this.workdir != null;
  }

  public void setWorkdirIsSet(boolean value) {
    if (!value) {
      this.workdir = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Job setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been asigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((Long)value);
      }
      break;

    case EXECUTETIME:
      if (value == null) {
        unsetExecutetime();
      } else {
        setExecutetime((Long)value);
      }
      break;

    case FINISHTIME:
      if (value == null) {
        unsetFinishtime();
      } else {
        setFinishtime((Long)value);
      }
      break;

    case EXITVALUE:
      if (value == null) {
        unsetExitvalue();
      } else {
        setExitvalue((Long)value);
      }
      break;

    case STDOUT:
      if (value == null) {
        unsetStdout();
      } else {
        setStdout((String)value);
      }
      break;

    case STDERR:
      if (value == null) {
        unsetStderr();
      } else {
        setStderr((String)value);
      }
      break;

    case WORKDIR:
      if (value == null) {
        unsetWorkdir();
      } else {
        setWorkdir((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return new Long(getId());

    case USER:
      return getUser();

    case COMMAND:
      return getCommand();

    case NAME:
      return getName();

    case DESC:
      return getDesc();

    case CREATETIME:
      return new Long(getCreatetime());

    case EXECUTETIME:
      return new Long(getExecutetime());

    case FINISHTIME:
      return new Long(getFinishtime());

    case EXITVALUE:
      return new Long(getExitvalue());

    case STDOUT:
      return getStdout();

    case STDERR:
      return getStderr();

    case WORKDIR:
      return getWorkdir();

    case STATUS:
      return new Integer(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER:
      return isSetUser();
    case COMMAND:
      return isSetCommand();
    case NAME:
      return isSetName();
    case DESC:
      return isSetDesc();
    case CREATETIME:
      return isSetCreatetime();
    case EXECUTETIME:
      return isSetExecutetime();
    case FINISHTIME:
      return isSetFinishtime();
    case EXITVALUE:
      return isSetExitvalue();
    case STDOUT:
      return isSetStdout();
    case STDERR:
      return isSetStderr();
    case WORKDIR:
      return isSetWorkdir();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Job)
      return this.equals((Job)that);
    return false;
  }

  public boolean equals(Job that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_createtime = true;
    boolean that_present_createtime = true;
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (this.createtime != that.createtime)
        return false;
    }

    boolean this_present_executetime = true;
    boolean that_present_executetime = true;
    if (this_present_executetime || that_present_executetime) {
      if (!(this_present_executetime && that_present_executetime))
        return false;
      if (this.executetime != that.executetime)
        return false;
    }

    boolean this_present_finishtime = true;
    boolean that_present_finishtime = true;
    if (this_present_finishtime || that_present_finishtime) {
      if (!(this_present_finishtime && that_present_finishtime))
        return false;
      if (this.finishtime != that.finishtime)
        return false;
    }

    boolean this_present_exitvalue = true;
    boolean that_present_exitvalue = true;
    if (this_present_exitvalue || that_present_exitvalue) {
      if (!(this_present_exitvalue && that_present_exitvalue))
        return false;
      if (this.exitvalue != that.exitvalue)
        return false;
    }

    boolean this_present_stdout = true && this.isSetStdout();
    boolean that_present_stdout = true && that.isSetStdout();
    if (this_present_stdout || that_present_stdout) {
      if (!(this_present_stdout && that_present_stdout))
        return false;
      if (!this.stdout.equals(that.stdout))
        return false;
    }

    boolean this_present_stderr = true && this.isSetStderr();
    boolean that_present_stderr = true && that.isSetStderr();
    if (this_present_stderr || that_present_stderr) {
      if (!(this_present_stderr && that_present_stderr))
        return false;
      if (!this.stderr.equals(that.stderr))
        return false;
    }

    boolean this_present_workdir = true && this.isSetWorkdir();
    boolean that_present_workdir = true && that.isSetWorkdir();
    if (this_present_workdir || that_present_workdir) {
      if (!(this_present_workdir && that_present_workdir))
        return false;
      if (!this.workdir.equals(that.workdir))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Job other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Job typedOther = (Job)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = TBaseHelper.compareTo(this.user, typedOther.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommand()).compareTo(typedOther.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = TBaseHelper.compareTo(this.command, typedOther.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(typedOther.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = TBaseHelper.compareTo(this.createtime, typedOther.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutetime()).compareTo(typedOther.isSetExecutetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutetime()) {
      lastComparison = TBaseHelper.compareTo(this.executetime, typedOther.executetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishtime()).compareTo(typedOther.isSetFinishtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishtime()) {
      lastComparison = TBaseHelper.compareTo(this.finishtime, typedOther.finishtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExitvalue()).compareTo(typedOther.isSetExitvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExitvalue()) {
      lastComparison = TBaseHelper.compareTo(this.exitvalue, typedOther.exitvalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStdout()).compareTo(typedOther.isSetStdout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdout()) {
      lastComparison = TBaseHelper.compareTo(this.stdout, typedOther.stdout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStderr()).compareTo(typedOther.isSetStderr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStderr()) {
      lastComparison = TBaseHelper.compareTo(this.stderr, typedOther.stderr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkdir()).compareTo(typedOther.isSetWorkdir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkdir()) {
      lastComparison = TBaseHelper.compareTo(this.workdir, typedOther.workdir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.I64) {
            this.id = iprot.readI64();
            setIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER
          if (field.type == TType.STRING) {
            this.user = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COMMAND
          if (field.type == TType.STRING) {
            this.command = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DESC
          if (field.type == TType.STRING) {
            this.desc = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CREATETIME
          if (field.type == TType.I64) {
            this.createtime = iprot.readI64();
            setCreatetimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // EXECUTETIME
          if (field.type == TType.I64) {
            this.executetime = iprot.readI64();
            setExecutetimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // FINISHTIME
          if (field.type == TType.I64) {
            this.finishtime = iprot.readI64();
            setFinishtimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // EXITVALUE
          if (field.type == TType.I64) {
            this.exitvalue = iprot.readI64();
            setExitvalueIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // STDOUT
          if (field.type == TType.STRING) {
            this.stdout = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // STDERR
          if (field.type == TType.STRING) {
            this.stderr = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // WORKDIR
          if (field.type == TType.STRING) {
            this.workdir = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // STATUS
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            setStatusIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ID_FIELD_DESC);
    oprot.writeI64(this.id);
    oprot.writeFieldEnd();
    if (this.user != null) {
      oprot.writeFieldBegin(USER_FIELD_DESC);
      oprot.writeString(this.user);
      oprot.writeFieldEnd();
    }
    if (this.command != null) {
      oprot.writeFieldBegin(COMMAND_FIELD_DESC);
      oprot.writeString(this.command);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.desc != null) {
      oprot.writeFieldBegin(DESC_FIELD_DESC);
      oprot.writeString(this.desc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
    oprot.writeI64(this.createtime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EXECUTETIME_FIELD_DESC);
    oprot.writeI64(this.executetime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FINISHTIME_FIELD_DESC);
    oprot.writeI64(this.finishtime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EXITVALUE_FIELD_DESC);
    oprot.writeI64(this.exitvalue);
    oprot.writeFieldEnd();
    if (this.stdout != null) {
      oprot.writeFieldBegin(STDOUT_FIELD_DESC);
      oprot.writeString(this.stdout);
      oprot.writeFieldEnd();
    }
    if (this.stderr != null) {
      oprot.writeFieldBegin(STDERR_FIELD_DESC);
      oprot.writeString(this.stderr);
      oprot.writeFieldEnd();
    }
    if (this.workdir != null) {
      oprot.writeFieldBegin(WORKDIR_FIELD_DESC);
      oprot.writeString(this.workdir);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Job(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("command:");
    if (this.command == null) {
      sb.append("null");
    } else {
      sb.append(this.command);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createtime:");
    sb.append(this.createtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("executetime:");
    sb.append(this.executetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishtime:");
    sb.append(this.finishtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exitvalue:");
    sb.append(this.exitvalue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stdout:");
    if (this.stdout == null) {
      sb.append("null");
    } else {
      sb.append(this.stdout);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stderr:");
    if (this.stderr == null) {
      sb.append("null");
    } else {
      sb.append(this.stderr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workdir:");
    if (this.workdir == null) {
      sb.append("null");
    } else {
      sb.append(this.workdir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

